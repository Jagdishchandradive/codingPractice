
import java.util.HashSet;

public class Find_Duplicates_in_Array {
    //O(n)
    public static boolean containsDuplicate(int[] nums) {
        HashSet<Integer> set = new HashSet<>();
        for (int num : nums) {
            if (set.contains(num)) {
                return true; // If duplicate found, return true
            }
            set.add(num); // Add the element to the set
            // while comparing with already added elements of set,
        }
        return false; // No duplicates found
    }
    public static void main(String[] args) {
        int[] numbers = {1,2,3,4,5,3}; // Example array with a duplicate
        //Solution solution = new Solution();
        boolean hasDuplicates = containsDuplicate(numbers);
        System.out.println("Array contains duplicates: " + hasDuplicates);
    }
----------------------------------------------------------------------------------
OR for the same Time Complexity use this,
class Solution {
    public boolean containsDuplicate(int[] nums) 
    { HashSet<Integer> bucket = new HashSet<>();
        for(int i=0;i<nums.length;i++){
            if(!bucket.add(nums[i])){
                return true;
            }
        
        }
        return false;
    }
    }

----------------------------------------------------------------------------------
   /*
   O(n^2)--> Time complexity
   public boolean containsDuplicate(int[] nums){
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j< nums.length;j++){
                if(nums[i]==nums[j]){

                    return true;
                }
            }
        }
        return false;
    }


    public static void main(String[] args) {
        int[] numbers = {1, 2, 3, 4, 5, 2}; // Example array with a duplicate
        Solution solution = new Solution();
        boolean hasDuplicates = solution.containsDuplicate(numbers);
        System.out.println("Array contains duplicates: " + hasDuplicates);
    }*/
}
